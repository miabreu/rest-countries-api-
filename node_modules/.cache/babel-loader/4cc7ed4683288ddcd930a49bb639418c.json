{"ast":null,"code":"var _jsxFileName = \"/Users/michelleabreu/Desktop/rest-countries-api/src/context/countriesContext.tsx\",\n  _s = $RefreshSig$();\nimport { createContext, useState } from 'react';\nimport { useQuery } from 'react-query';\nimport { loadData } from '../components/Api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst defaultState = {\n  data: [],\n  isLoading: false,\n  isError: false,\n  getSearchedCountry: () => {},\n  searchedCountry: \"\",\n  getFilteredRegion: () => {},\n  filteredRegion: \"\"\n};\nexport const CountriesContext = /*#__PURE__*/createContext(defaultState);\nexport const CountriesContextProvider = _ref => {\n  _s();\n  let {\n    children\n  } = _ref;\n  const [searchedCountry, setSearchedCountry] = useState('');\n  const [filteredRegion, setFilteredRegion] = useState('');\n  const {\n    isLoading,\n    isError,\n    data\n  } = useQuery('countriesInfos', () => loadData('https://restcountries.com/v2/all'));\n  const getSearchedCountry = value => {\n    setSearchedCountry(value);\n  };\n  const getFilteredRegion = value => {\n    if (value !== \"All\") {\n      setFilteredRegion(value);\n    } else {\n      setFilteredRegion(\"\");\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(CountriesContext.Provider, {\n    value: {\n      data,\n      isLoading,\n      isError,\n      getSearchedCountry,\n      searchedCountry,\n      getFilteredRegion,\n      filteredRegion\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 5\n  }, this);\n};\n_s(CountriesContextProvider, \"dbzRIWctjjnntVUqhmCKGzLntL8=\", false, function () {\n  return [useQuery];\n});\n_c = CountriesContextProvider;\nvar _c;\n$RefreshReg$(_c, \"CountriesContextProvider\");","map":{"version":3,"names":["createContext","useState","useQuery","loadData","jsxDEV","_jsxDEV","defaultState","data","isLoading","isError","getSearchedCountry","searchedCountry","getFilteredRegion","filteredRegion","CountriesContext","CountriesContextProvider","_ref","_s","children","setSearchedCountry","setFilteredRegion","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/michelleabreu/Desktop/rest-countries-api/src/context/countriesContext.tsx"],"sourcesContent":["import { createContext, useState, ReactNode } from 'react';\nimport { useQuery } from 'react-query';\nimport { loadData } from '../components/Api';\nimport { Countries } from '../interfaces/types';\n\ninterface AllCountriesContext {\n  data?: Countries[],\n  isLoading: boolean,\n  isError: boolean,\n  getSearchedCountry: (value: string) => void;\n  searchedCountry: string,\n  getFilteredRegion: (value: string) => void;\n  filteredRegion: string,\n}\n\nconst defaultState = {\n  data: [],\n  isLoading: false,\n  isError: false,\n  getSearchedCountry: () => {},\n  searchedCountry: \"\",\n  getFilteredRegion: () => {},\n  filteredRegion: \"\"\n}\n\nexport const CountriesContext = createContext<AllCountriesContext>(defaultState);\n\nexport const CountriesContextProvider = ({ children }: {children: ReactNode}) => {\n\n  const [searchedCountry, setSearchedCountry] = useState('');\n  const [filteredRegion, setFilteredRegion] = useState('');\n\n  const { isLoading, isError, data } = useQuery<Countries[]>('countriesInfos', () => loadData('https://restcountries.com/v2/all'));\n\n  const getSearchedCountry = (value: string):void => {\n    setSearchedCountry(value)\n  };\n\n  const getFilteredRegion = (value: string):void => {\n    if (value !== \"All\") {\n    setFilteredRegion(value)\n    } else {\n      setFilteredRegion(\"\")\n    }\n  };\n\n  return (\n    <CountriesContext.Provider value={{\n      data, \n      isLoading,\n      isError,\n      getSearchedCountry,\n      searchedCountry,\n      getFilteredRegion,\n      filteredRegion\n    }}>\n      {children}\n    </CountriesContext.Provider>\n  )\n};"],"mappings":";;AAAA,SAASA,aAAa,EAAEC,QAAQ,QAAmB,OAAO;AAC1D,SAASC,QAAQ,QAAQ,aAAa;AACtC,SAASC,QAAQ,QAAQ,mBAAmB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAa7C,MAAMC,YAAY,GAAG;EACnBC,IAAI,EAAE,EAAE;EACRC,SAAS,EAAE,KAAK;EAChBC,OAAO,EAAE,KAAK;EACdC,kBAAkB,EAAEA,CAAA,KAAM,CAAC,CAAC;EAC5BC,eAAe,EAAE,EAAE;EACnBC,iBAAiB,EAAEA,CAAA,KAAM,CAAC,CAAC;EAC3BC,cAAc,EAAE;AAClB,CAAC;AAED,OAAO,MAAMC,gBAAgB,gBAAGd,aAAa,CAAsBM,YAAY,CAAC;AAEhF,OAAO,MAAMS,wBAAwB,GAAGC,IAAA,IAAyC;EAAAC,EAAA;EAAA,IAAxC;IAAEC;EAAgC,CAAC,GAAAF,IAAA;EAE1E,MAAM,CAACL,eAAe,EAAEQ,kBAAkB,CAAC,GAAGlB,QAAQ,CAAC,EAAE,CAAC;EAC1D,MAAM,CAACY,cAAc,EAAEO,iBAAiB,CAAC,GAAGnB,QAAQ,CAAC,EAAE,CAAC;EAExD,MAAM;IAAEO,SAAS;IAAEC,OAAO;IAAEF;EAAK,CAAC,GAAGL,QAAQ,CAAc,gBAAgB,EAAE,MAAMC,QAAQ,CAAC,kCAAkC,CAAC,CAAC;EAEhI,MAAMO,kBAAkB,GAAIW,KAAa,IAAU;IACjDF,kBAAkB,CAACE,KAAK,CAAC;EAC3B,CAAC;EAED,MAAMT,iBAAiB,GAAIS,KAAa,IAAU;IAChD,IAAIA,KAAK,KAAK,KAAK,EAAE;MACrBD,iBAAiB,CAACC,KAAK,CAAC;IACxB,CAAC,MAAM;MACLD,iBAAiB,CAAC,EAAE,CAAC;IACvB;EACF,CAAC;EAED,oBACEf,OAAA,CAACS,gBAAgB,CAACQ,QAAQ;IAACD,KAAK,EAAE;MAChCd,IAAI;MACJC,SAAS;MACTC,OAAO;MACPC,kBAAkB;MAClBC,eAAe;MACfC,iBAAiB;MACjBC;IACF,CAAE;IAAAK,QAAA,EACCA;EAAQ;IAAAK,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACgB,CAAC;AAEhC,CAAC;AAACT,EAAA,CAhCWF,wBAAwB;EAAA,QAKEb,QAAQ;AAAA;AAAAyB,EAAA,GALlCZ,wBAAwB;AAAA,IAAAY,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module"}