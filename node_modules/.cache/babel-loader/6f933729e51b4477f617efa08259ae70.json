{"ast":null,"code":"var _jsxFileName = \"/Users/michelleabreu/Desktop/rest-countries-api/src/context/themeContext.tsx\",\n  _s = $RefreshSig$();\nimport { createContext, useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n;\nconst defaultState = {\n  theme: \"light\",\n  toggleMode: () => {}\n};\nexport const ThemeContext = /*#__PURE__*/createContext(defaultState);\nexport const ThemeContextProvider = _ref => {\n  _s();\n  let {\n    children\n  } = _ref;\n  const [theme, setTheme] = useState(\"light\");\n  const toggleMode = () => {\n    if (theme === \"light\") {\n      setTheme(\"dark\");\n      localStorage.setItem(\"theme\", \"dark\");\n    } else {\n      setTheme(\"light\");\n      localStorage.setItem(\"theme\", \"light\");\n    }\n    ;\n  };\n  useEffect(() => {\n    const value = localStorage.getItem(\"theme\");\n    if (localStorage && typeof value === \"string\") {\n      setTheme(value);\n    }\n    ;\n  }, []);\n  return /*#__PURE__*/_jsxDEV(ThemeContext.Provider, {\n    value: {\n      theme,\n      toggleMode\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 5\n  }, this);\n};\n_s(ThemeContextProvider, \"lm84LOZxHN0YC4jzvAwAP/18Sno=\");\n_c = ThemeContextProvider;\nvar _c;\n$RefreshReg$(_c, \"ThemeContextProvider\");","map":{"version":3,"names":["createContext","useState","useEffect","jsxDEV","_jsxDEV","defaultState","theme","toggleMode","ThemeContext","ThemeContextProvider","_ref","_s","children","setTheme","localStorage","setItem","value","getItem","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/michelleabreu/Desktop/rest-countries-api/src/context/themeContext.tsx"],"sourcesContent":["import { createContext, useState, useEffect, ReactNode } from 'react';\n\ninterface CountriesThemeContext {\n  theme: string,\n  toggleMode: () => void\n};\n\nconst defaultState = {\n  theme: \"light\",\n  toggleMode: () => {}\n}\n\nexport const ThemeContext = createContext<CountriesThemeContext>(defaultState);\n\nexport const ThemeContextProvider = ({ children }: {children: ReactNode}) => {\n\n  const [theme, setTheme] = useState(\"light\");\n\n  const toggleMode = () => {\n    if (theme === \"light\") {\n      setTheme(\"dark\");\n      localStorage.setItem(\"theme\", \"dark\")\n    } else {\n      setTheme(\"light\");\n      localStorage.setItem(\"theme\", \"light\")\n    };\n  };\n\n  useEffect(() => {\n    const value = localStorage.getItem(\"theme\");\n    if (localStorage && typeof value === \"string\") {\n      setTheme(value)\n    };\n  }, []);\n\n  return (\n    <ThemeContext.Provider value={{ theme, toggleMode}}>\n      {children}\n    </ThemeContext.Provider>\n  );\n};\n"],"mappings":";;AAAA,SAASA,aAAa,EAAEC,QAAQ,EAAEC,SAAS,QAAmB,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAKrE;AAED,MAAMC,YAAY,GAAG;EACnBC,KAAK,EAAE,OAAO;EACdC,UAAU,EAAEA,CAAA,KAAM,CAAC;AACrB,CAAC;AAED,OAAO,MAAMC,YAAY,gBAAGR,aAAa,CAAwBK,YAAY,CAAC;AAE9E,OAAO,MAAMI,oBAAoB,GAAGC,IAAA,IAAyC;EAAAC,EAAA;EAAA,IAAxC;IAAEC;EAAgC,CAAC,GAAAF,IAAA;EAEtE,MAAM,CAACJ,KAAK,EAAEO,QAAQ,CAAC,GAAGZ,QAAQ,CAAC,OAAO,CAAC;EAE3C,MAAMM,UAAU,GAAGA,CAAA,KAAM;IACvB,IAAID,KAAK,KAAK,OAAO,EAAE;MACrBO,QAAQ,CAAC,MAAM,CAAC;MAChBC,YAAY,CAACC,OAAO,CAAC,OAAO,EAAE,MAAM,CAAC;IACvC,CAAC,MAAM;MACLF,QAAQ,CAAC,OAAO,CAAC;MACjBC,YAAY,CAACC,OAAO,CAAC,OAAO,EAAE,OAAO,CAAC;IACxC;IAAC;EACH,CAAC;EAEDb,SAAS,CAAC,MAAM;IACd,MAAMc,KAAK,GAAGF,YAAY,CAACG,OAAO,CAAC,OAAO,CAAC;IAC3C,IAAIH,YAAY,IAAI,OAAOE,KAAK,KAAK,QAAQ,EAAE;MAC7CH,QAAQ,CAACG,KAAK,CAAC;IACjB;IAAC;EACH,CAAC,EAAE,EAAE,CAAC;EAEN,oBACEZ,OAAA,CAACI,YAAY,CAACU,QAAQ;IAACF,KAAK,EAAE;MAAEV,KAAK;MAAEC;IAAU,CAAE;IAAAK,QAAA,EAChDA;EAAQ;IAAAO,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACY,CAAC;AAE5B,CAAC;AAACX,EAAA,CA1BWF,oBAAoB;AAAAc,EAAA,GAApBd,oBAAoB;AAAA,IAAAc,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module"}